//NOT COMPLETE

Texture2D albedo : register(t0);
Texture2D metallic : register(t1);
Texture2D roughness : register(t2);
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

cbuffer TransparentBuffer
{
    float blendAmount;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
	float metalness;
	float smoothness;
    float3 lightDir;
    float lightIntensity;
    float4 color;

    textureColor = albedo.Sample(SampleType, input.tex);
	metalness = metallic.Sample(SampleType, input.tex).r;
	smoothness = roughness.Sample(SampleType, input.tex).r;

	color = ambientColor;
    lightDir = -lightDirection;

	//angle between normal and light direction
	float cosLo = max(0.0, dot(input.normal, lightDir));


    lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
    {
        color += (diffuseColor * lightIntensity);
    }
	color = saturate(color);
    color = color * textureColor;
	color.a = textureColor.a;

    return color;
}
